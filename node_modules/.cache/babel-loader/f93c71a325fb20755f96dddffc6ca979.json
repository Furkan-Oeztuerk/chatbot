{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Furkan\\\\Desktop\\\\siit_openhouse_final-master\\\\src\\\\App.js\";\n\n/*\nnpm install\nnpm install react-simple-chatbot --save,npm node-fetch\nnpm start\n\nservice :\ndialogflow  : 180 requests per minute*\ndialogflowgateway : 1000 messages per month for free\nresponsivevoice : if the system require speech-to-text(use google chrome)\n\nref : https://lucasbassetti.com.br/react-simple-chatbot/#/docs/chatbot\n*/\nimport Main from './Main';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider } from 'styled-components';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nconst welcome_msg = \"SIIT สวัสดีค่ะ สามารถสอบถามเกี่ยวกับประวัติความเป็นมา หลักสูตรหรือเกี่ยวกับAdmission ได้เลยค่ะ\";\n/* Google service */\n// const appid = 'chatbot-tuopen-yeebca' // <- Google Cloud Project ID\n\nconst session = 'dialogflow-cli'; // <- Session ID\n\nconst lang = 'th'; // <- Language\n\nconst endpoint = \"https://siit-tu-jfkumd.gateway.dialogflow.cloud.ushakov.co\"; // <- endpoint\n// all available props\n\nconst theme = {\n  background: '#f5f8fb',\n  fontFamily: 'Helvetica Neue',\n  headerBgColor: '#630680',\n  headerFontColor: '#fff',\n  headerFontSize: '15px',\n  botBubbleColor: '#630680',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a'\n};\n\nclass TuChatbot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderRedirect = () => {\n      if (this.state.redirect) {\n        return React.createElement(Redirect, {\n          to: this.state.nextPath,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.state = {\n      loading: true,\n      result: '',\n      trigger: false,\n      nextPath: '',\n      redirect: false\n    };\n    this.triggetNext = this.triggetNext.bind(this);\n  }\n\n  componentWillMount() {\n    const self = this;\n    const steps = this.props.steps;\n    const search = steps.search.value;\n    console.log(steps.search.value);\n\n    if (search === \"History\") {\n      // window.location.replace('/history');\n      this.setState({\n        redirect: true,\n        nextPath: '/history'\n      });\n    }\n\n    if (search === \"Fact\") {\n      this.setState({\n        redirect: true,\n        nextPath: '/fact'\n      });\n    }\n\n    if (search === \"Curriculum\") {\n      this.setState({\n        redirect: true,\n        nextPath: '/curriculum'\n      });\n    }\n\n    if (search === \"Campus\") {\n      this.setState({\n        redirect: true,\n        nextPath: '/mapdirection'\n      });\n    }\n\n    if (search === \"Admission\") {\n      this.setState({\n        redirect: true,\n        nextPath: '/admission'\n      });\n    } else {}\n\n    const endpoints = encodeURI('https://dbpedia.org');\n    const querys = encodeURI(\"\\n      select * where {\\n      ?x rdfs:label \\\"\".concat(search, \"\\\"@en .\\n      ?x rdfs:comment ?comment .\\n      FILTER (lang(?comment) = 'en')\\n      } LIMIT 100\\n    \"));\n    const queryUrls = \"https://dbpedia.org/sparql/?default-graph-uri=\".concat(endpoints, \"&query=\").concat(querys, \"&format=json\");\n\n    const fetch = require('node-fetch');\n\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('readystatechange', readyStateChange);\n\n    function readyStateChange() {\n      console.log(steps.search.value);\n\n      if (this.readyState === 4) {\n        // Build a request\n        var request = {\n          session: session,\n          queryInput: {\n            text: {\n              text: steps.search.value,\n              languageCode: lang\n            }\n          }\n        }; // Talk to endpoint and return the results \n\n        fetch(endpoint, {\n          method: 'POST',\n          body: JSON.stringify(request),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(res => res.json()).then(res => {\n          var messages = res.queryResult.fulfillmentMessages;\n\n          for (var m in messages) {\n            // Display Dialogflow/Webhook Messages \n            if (messages[m].text) {\n              self.setState({\n                loading: false,\n                result: messages[m].text.text[0]\n              });\n              let speaking = setTimeout(window.responsiveVoice.speak(messages[m].text.text[0], \"Thai Female\", {\n                rate: 1.0\n              }));\n              self.triggetNext();\n            } else {\n              self.setState({\n                loading: false,\n                result: 'ระบบอินเทอร์เน็ตขัดข้อง'\n              });\n              let speaking = setTimeout(window.responsiveVoice.speak(\"ระบบอินเทอร์เน็ตขัดข้อง\", \"Thai Female\", {\n                rate: 1.0\n              }));\n            }\n          }\n        });\n      }\n    }\n\n    xhr.open('GET', queryUrls);\n    xhr.send();\n  }\n\n  triggetNext() {\n    this.setState({\n      trigger: true\n    }, () => {\n      this.props.triggerNextStep();\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          result = _this$state.result;\n    return React.createElement(\"div\", {\n      className: \"TuChatbot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.renderRedirect(), loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }) : result);\n  }\n\n}\n\nTuChatbot.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func\n};\nTuChatbot.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined\n};\n\nconst ChatbotApp = () => React.createElement(ThemeProvider, {\n  theme: theme,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 207\n  },\n  __self: this\n}, React.createElement(ChatBot, {\n  headerTitle: \"SIIT Chatbot\" //speechSynthesis={{ enable: true, lang: 'th'}} for window browser only\n  ,\n  recognitionEnable: true,\n  recognitionLang: \"th\",\n  recognitionPlaceholder: \"TU \\u0E01\\u0E33\\u0E25\\u0E31\\u0E07\\u0E1F\\u0E31\\u0E07\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E19\\u0E30\\u0E04\\u0E30\",\n  placeholder: \"\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E01\\u0E32\\u0E23\\u0E1E\\u0E34\\u0E21\\u0E1E\\u0E4C\\u0E44\\u0E14\\u0E49\\u0E40\\u0E25\\u0E22\\u0E04\\u0E48\\u0E30\",\n  steps: steps,\n  userAvatar: \"logo192.png\",\n  botAvatar: \"logo192.png\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 208\n  },\n  __self: this\n}), \";\");\n\nexport default ChatbotApp;","map":{"version":3,"sources":["C:/Users/Furkan/Desktop/siit_openhouse_final-master/src/App.js"],"names":["Main","React","Component","Redirect","PropTypes","ThemeProvider","ChatBot","Loading","welcome_msg","session","lang","endpoint","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","TuChatbot","constructor","props","renderRedirect","state","redirect","nextPath","loading","result","trigger","triggetNext","bind","componentWillMount","self","steps","search","value","console","log","setState","endpoints","encodeURI","querys","queryUrls","fetch","require","xhr","XMLHttpRequest","addEventListener","readyStateChange","readyState","request","queryInput","text","languageCode","method","body","JSON","stringify","headers","then","res","json","messages","queryResult","fulfillmentMessages","m","speaking","setTimeout","window","responsiveVoice","speak","rate","open","send","triggerNextStep","render","propTypes","object","func","defaultProps","undefined","ChatbotApp"],"mappings":"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","sourcesContent":["/*\nnpm install\nnpm install react-simple-chatbot --save,npm node-fetch\nnpm start\n\nservice :\ndialogflow  : 180 requests per minute*\ndialogflowgateway : 1000 messages per month for free\nresponsivevoice : if the system require speech-to-text(use google chrome)\n\nref : https://lucasbassetti.com.br/react-simple-chatbot/#/docs/chatbot\n*/\nimport Main from './Main';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider } from 'styled-components';\nimport ChatBot, { Loading } from 'react-simple-chatbot'\n\n\n\nconst welcome_msg = \"SIIT สวัสดีค่ะ สามารถสอบถามเกี่ยวกับประวัติความเป็นมา หลักสูตรหรือเกี่ยวกับAdmission ได้เลยค่ะ\"\n\n /* Google service */\n// const appid = 'chatbot-tuopen-yeebca' // <- Google Cloud Project ID\nconst session = 'dialogflow-cli' // <- Session ID\nconst lang = 'th' // <- Language\nconst endpoint = `https://siit-tu-jfkumd.gateway.dialogflow.cloud.ushakov.co` // <- endpoint\n\n// all available props\nconst theme = {\n  background: '#f5f8fb',\n  fontFamily: 'Helvetica Neue',\n  headerBgColor: '#630680',\n  headerFontColor: '#fff',\n  headerFontSize: '15px',\n  botBubbleColor: '#630680',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a',\n};\n\nclass TuChatbot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      result: '',\n      trigger: false,\n      nextPath:'',\n      redirect: false,\n    };\n\n    this.triggetNext = this.triggetNext.bind(this);\n  }\n\n  componentWillMount() {\n    const self = this;\n    const { steps } = this.props;\n    const search = steps.search.value;\n    console.log(steps.search.value)\n    if(search===\"History\"){\n     // window.location.replace('/history');\n        \n\n        this.setState({\n          redirect: true,\n          nextPath:'/history'\n        })\n    }\n    \n    if(search===\"Fact\"){\n\n      this.setState({\n        redirect: true,\n        nextPath:'/fact'\n      })\n      \n    }\n    if(search===\"Curriculum\" ){\n\n      this.setState({\n        redirect: true,\n        nextPath:'/curriculum'\n      })\n      \n    }\n    if(search===\"Campus\"){\n\n      this.setState({\n        redirect: true,\n        nextPath:'/mapdirection'\n      })\n      \n    }\n\n    if(search===\"Admission\" ){\n      this.setState({\n        redirect: true,\n        nextPath:'/admission'\n      })\n    }\n    \n    else{\n\n    }\n\n   \n\n    const endpoints = encodeURI('https://dbpedia.org');\n    const querys = encodeURI(`\n      select * where {\n      ?x rdfs:label \"${search}\"@en .\n      ?x rdfs:comment ?comment .\n      FILTER (lang(?comment) = 'en')\n      } LIMIT 100\n    `);\n\n    const queryUrls = `https://dbpedia.org/sparql/?default-graph-uri=${endpoints}&query=${querys}&format=json`;\n \n    const fetch = require('node-fetch')\n\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('readystatechange', readyStateChange);\n\n\n    function readyStateChange() {\nconsole.log(steps.search.value)\n\n      if (this.readyState === 4) {\n  \n        // Build a request\n        var request = {\n          session: session,\n          queryInput: {\n            text: {\n              text: steps.search.value,\n              languageCode: lang\n            }\n          }\n        }\n        // Talk to endpoint and return the results \n        fetch(endpoint, { method: 'POST', body: JSON.stringify(request), headers: { 'Content-Type': 'application/json' } })\n          .then(res => res.json())\n          .then(res => {\n            var messages = res.queryResult.fulfillmentMessages\n            for (var m in messages) {\n              // Display Dialogflow/Webhook Messages \n              if (messages[m].text) {\n                self.setState({ loading: false, result: messages[m].text.text[0] });\n                let speaking = setTimeout(window.responsiveVoice.speak(messages[m].text.text[0], \"Thai Female\", {rate: 1.0}));\n\n\n                self.triggetNext()\n              } else {\n                self.setState({ loading: false, result: 'ระบบอินเทอร์เน็ตขัดข้อง' });\n                let speaking = setTimeout(window.responsiveVoice.speak(\"ระบบอินเทอร์เน็ตขัดข้อง\", \"Thai Female\", {rate: 1.0}));\n              }\n            }\n\n          })\n      }\n    }\n\n    xhr.open('GET', queryUrls);\n    xhr.send();\n  }\n\n  triggetNext() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep();\n    });\n  }\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to={this.state.nextPath} />\n    }\n  }\n  render() {\n    const {loading, result } = this.state;\n\n    return (\n      <div className=\"TuChatbot\">\n         {this.renderRedirect()}\n        {loading ? <Loading /> : result}\n      </div>\n    );\n  }\n}\n\n\n\nTuChatbot.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nTuChatbot.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\n\nconst ChatbotApp = () => (\n  <ThemeProvider theme={theme}>\n    <ChatBot\n        headerTitle=\"SIIT Chatbot\"\n        //speechSynthesis={{ enable: true, lang: 'th'}} for window browser only\n        recognitionEnable={true}\n        recognitionLang='th'\n        recognitionPlaceholder = 'TU กำลังฟังอยู่นะคะ'\n        placeholder = 'เริ่มต้นการพิมพ์ได้เลยค่ะ'\n        steps={steps} \n        userAvatar= 'logo192.png'\n        botAvatar='logo192.png'\n    />;\n </ThemeProvider>\n);\n\nexport default ChatbotApp;"]},"metadata":{},"sourceType":"module"}